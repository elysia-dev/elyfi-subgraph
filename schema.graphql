type Reserve @entity {
  id: ID! # Rserve asset address
  lTokenInterestIndex: BigInt!
  lastUpdateTimestamp: Int!
  isPaused: Boolean!
  isActivated: Boolean!
  reserveHistory: [ReserveHistory!]! @derivedFrom(field: "reserve")
  deposit: [Deposit!]! @derivedFrom(field: "reserve")
  withdraw: [Withdraw!]! @derivedFrom(field: "reserve")
  borrow: [Borrow!]! @derivedFrom(field: "reserve")
  repay: [Repay!]! @derivedFrom(field: "reserve")
  lToken: LToken! @derivedFrom(field: "reserve")
  dToken: DToken! @derivedFrom(field: "reserve")
  lTokenUserBalance: LTokenUserBalance! @derivedFrom(field: "reserve")
  dTokenUserBalance: DTokenUserBalance! @derivedFrom(field: "reserve")
  incentivePool: IncentivePool! @derivedFrom(field: "reserve")
  depositAPY: BigInt!
  borrowAPY: BigInt!
  totalBorrow: BigInt!
  totalDeposit: BigInt!
  lTokenUserBalanceCount: Int!
  dTokenUserBalanceCount: Int!
}

type ReserveHistory @entity {
  id: ID! # txHash
  timestamp: Int!
  reserve: Reserve!
  lTokenInterestIndex: BigInt!
  depositAPY: BigInt!
  borrowAPY: BigInt!
  totalBorrow: BigInt!
  totalDeposit: BigInt!
}

type LToken @entity {
  id: ID! # LToken Contract Address
  reserve: Reserve!
  lTokenUserBalance: [LTokenUserBalance!]! @derivedFrom(field: "lToken")
  lTokenMint: [LTokenMint!]! @derivedFrom(field: "lToken")
  lTokenBurn: [LTokenBurn!]! @derivedFrom(field: "lToken")
}

# Transfer, Mint, Burn
type LTokenUserBalance @entity {
  id: ID! # User Address + LToken Address
  lToken: LToken!
  user: User!
  reserve: Reserve!
  balance: BigInt!
  lastUpdatedTimestamp: Int!
}

type DToken @entity {
  id: ID! # DToken Contract Address
  reserve: Reserve!
  dTokenUserBalance: [DTokenUserBalance!]! @derivedFrom(field: "dToken")
}

# Mint, Burn
type DTokenUserBalance @entity {
  id: ID! # User Address + DToken Address
  dToken: DToken!
  reserve: Reserve!
  user: User!
  balance: BigInt!
  lastUpdatedTimestamp: Int!
}

type User @entity {
  id: ID! # Account address
  lTokenBalance: [LTokenUserBalance!]! @derivedFrom(field: "user")
  lTokenMint: [LTokenMint!]! @derivedFrom(field: "account")
  lTokenBurn: [LTokenBurn!]! @derivedFrom(field: "account")
  dTokenBalance: [DTokenUserBalance!]! @derivedFrom(field: "user")
  managingAssetBondToken: [AssetBondToken!]!
    @derivedFrom(field: "collateralServiceProvider")
  owningAssetBondToken: [AssetBondToken!]! @derivedFrom(field: "borrower")
  signedAssetBondToken: [AssetBondToken!]! @derivedFrom(field: "signer")
  deposit: [Deposit!]! @derivedFrom(field: "account")
  withdraw: [Withdraw!]! @derivedFrom(field: "account")
  borrow: [Borrow!]! @derivedFrom(field: "borrower")
  managingBorrow: [Borrow!]! @derivedFrom(field: "collateralServiceProvider")
  repay: [Repay!]! @derivedFrom(field: "borrower")
  stakingPoolStake: [StakingPoolStake!]! @derivedFrom(field: "user")
  stakingPoolWithdraw: [StakingPoolWithdraw!]! @derivedFrom(field: "user")
  stakingPoolMigrate: [StakingPoolMigrate!]! @derivedFrom(field: "user")
  stakingPoolClaim: [StakingPoolClaim!]! @derivedFrom(field: "user")
  staker: [StakingPoolStaker!]! @derivedFrom(field: "user")
  isCouncil: Boolean!
  isCollateralServiceProvider: Boolean!
}

type AssetBondToken @entity {
  id: ID! # unique TokenID
  state: Int
  signer: User
  borrower: User
  collateralServiceProvider: User
  principal: BigInt
  debtCeiling: BigInt
  couponRate: BigInt
  interestRate: BigInt
  delinquencyRate: BigInt
  loanStartTimestamp: Int
  collateralizeTimestamp: Int
  maturityTimestamp: Int
  liquidationTimestamp: Int
  ipfsHash: String
  signerOpinionHash: String
  reserve: Reserve!
}

type Deposit @entity {
  id: ID! # Tx Hash
  reserve: Reserve!
  account: User!
  amount: BigInt!
  timestamp: Int!
}

type Withdraw @entity {
  id: ID! # Tx Hash
  reserve: Reserve!
  account: User!
  to: User!
  amount: BigInt!
  timestamp: Int!
}

type Borrow @entity {
  id: ID! # Tx Hash
  reserve: Reserve!
  collateralServiceProvider: User!
  borrower: User!
  tokenId: String!
  borrowAPY: BigInt!
  amount: BigInt!
  timestamp: Int!
}

type Repay @entity {
  id: ID! # Tx Hash
  reserve: Reserve!
  borrower: User!
  tokenId: String!
  userDTokenBalance: BigInt!
  feeOnCollateralServiceProvider: BigInt!
  timestamp: Int!
}

type LTokenMint @entity {
  id: ID!
  lToken: LToken!
  account: User!
  amount: BigInt!
  index: BigInt!
  timestamp: Int!
}

type LTokenBurn @entity {
  id: ID!
  lToken: LToken!
  account: User!
  receiver: User!
  amount: BigInt!
  index: BigInt!
  timestamp: Int!
}

type StakingPool @entity {
  id: ID!
  stake: [StakingPoolStake!]! @derivedFrom(field: "stakingPool")
  withdraw: [StakingPoolWithdraw!]! @derivedFrom(field: "stakingPool")
  migrate: [StakingPoolMigrate!]! @derivedFrom(field: "stakingPool")
  claim: [StakingPoolClaim!]! @derivedFrom(field: "stakingPool")
  staker: [StakingPoolStaker!]! @derivedFrom(field: "stakingPool")
}

type StakingPoolStaker @entity {
  id: ID!
  user: User!
  stakingPool: StakingPool!
  amount: BigInt!
  round: Int!
}

type StakingPoolStake @entity {
  id: ID!
  user: User!
  amount: BigInt!
  stakingPool: StakingPool!
  round: Int!
  timestamp: Int!
}

type StakingPoolWithdraw @entity {
  id: ID!
  user: User!
  stakingPool: StakingPool!
  amount: BigInt!
  round: Int!
  timestamp: Int!
}

type StakingPoolMigrate @entity {
  id: ID!
  user: User!
  stakingPool: StakingPool!
  amount: BigInt!
  round: Int!
  timestamp: Int!
}

type StakingPoolClaim @entity {
  id: ID!
  user: User!
  stakingPool: StakingPool!
  round: Int!
  amount: BigInt!
  timestamp: Int!
}

type IncentivePool @entity {
  id: ID!
  reserve: Reserve!
}

type Tokenizer @entity {
  id: ID!
  reserve: Reserve!
}
